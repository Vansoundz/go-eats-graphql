// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Order struct {
	OrderID     string     `json:"OrderID"`
	Person      *Person    `json:"Person"`
	PersonID    string     `json:"PersonID"`
	Products    []*Product `json:"Products"`
	CreatedDate *string    `json:"CreatedDate"`
	Status      *Status    `json:"Status"`
}

type OrderInput struct {
	OrderID  *string  `json:"OrderID"`
	PersonID string   `json:"PersonID"`
	Products []string `json:"Products"`
	Status   *Status  `json:"Status"`
}

type Person struct {
	PersonID    string  `json:"PersonID"`
	DisplayName string  `json:"DisplayName"`
	PhoneNumber string  `json:"PhoneNumber"`
	CreatedDate *string `json:"CreatedDate"`
	IsActive    *bool   `json:"IsActive"`
}

type PersonInput struct {
	PersonID    *string `json:"PersonID"`
	DisplayName string  `json:"DisplayName"`
	PhoneNumber string  `json:"PhoneNumber"`
	IsActive    *bool   `json:"IsActive"`
}

type Product struct {
	ProductID   string  `json:"ProductID"`
	ProductName string  `json:"ProductName"`
	Price       int     `json:"Price"`
	Quantity    int     `json:"Quantity"`
	CreatedDate *string `json:"CreatedDate"`
}

type ProductInput struct {
	ProductID   *string `json:"ProductID"`
	ProductName string  `json:"ProductName"`
	Price       int     `json:"Price"`
	Quantity    int     `json:"Quantity"`
}

type Status string

const (
	StatusPending   Status = "Pending"
	StatusConfirmed Status = "Confirmed"
	StatusComplete  Status = "Complete"
	StatusRejected  Status = "Rejected"
)

var AllStatus = []Status{
	StatusPending,
	StatusConfirmed,
	StatusComplete,
	StatusRejected,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusPending, StatusConfirmed, StatusComplete, StatusRejected:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
